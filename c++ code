#include <bits/stdc++.h>
using namespace std;
#define faster ios_base::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);

double frand(double min,double max){
    double f=(double )rand()/RAND_MAX;
    return min+f*(max-min);
}
int arrivalTimeordinary( ){
    double t= frand(0,1);
    if(t<=0.09)
        return 0;
    else if(t<=0.26)
        return 1;
    else if(t<=0.53)
        return 2;
    else if(t<=0.73)
        return 3;
    else if(t<=0.88)
        return 4;
    else if(t<=1)
        return 5;
}
int arrivalTimevip(){

    double t= frand(0,1);
    if(t<=0.1)
        return 1;
    else if(t<=0.3)
        return 2;
    else if(t<=0.6)
        return 3;
    else if(t<=1)
        return 4;
}
int serviceTimeordinary(){
    double t= frand(0,1);
    if(t<=0.20)
        return 1;
    else if(t<=0.60)
        return 2;
    else if(t<=0.88)
        return 3;
    else if(t<=1)
        return 4;


}
int serviceTimevip(){
    double t= frand(0,1);
    if(t<=0.10)
        return 1;
    else if(t<=0.40)
        return 2;
    else if(t<=0.78)
        return 3;
    else if(t<=1)
        return 4;
}
int teller[10][12];
int main(){
    faster
    int num=10,f;
    f=num-1;
    deque<pair<int,int>>vip;
    deque<pair<int,int>>ord;

    int arrival_time_vip=0,arrival_time_ord=0.0,wait_time_vip=0.0,wait_time_ord=0.0,a=0,count1=0,count2=0,
            service_time_ord=0.0,service_time_vip=0.0;
    for (int i = 0; i <num ; ++i) {
        double  rr= frand(0.0,1.0);
     //   cin>>rr;

        /* num for coulms :
            * 0 for arrival time for ordinary customer;1
            * 1 for interarrival time for ordinary customer;1
            * 2 for waiting time for ordinary customer;
            * 3 for service time for ordinary customer;1
            * 4 for completion time for ordinary student;1
            * 5 for arrival time for vip customer;1
            * 6 for interarrival time for vip customer;1
            * 7 for waiting time for vip student;
            * 8 for service time for vip customer;1
            * 9 for completion time for vip customer;1
            * 10 for service start time;1

            * 11 for time in system;1*/

        if(rr<=0.5){//ordinary customer;
            teller[i][5]= 0;  teller[i][6]=0;  teller[i][7]=0;  teller[i][8]=0;  teller[i][9]=0;
            teller[i][0]=arrivalTimeordinary();
            teller[i][3]=serviceTimeordinary();

            if(i==0){
                teller[i][1]=teller[i][0];
                teller[i][2]=0;
                a=a+  teller[i][3];
            }

            else{
                if( teller[i-1][3]==0)
                    teller[i][1]=teller[i-1][6]+teller[i][0];
                else
                    teller[i][1]=teller[i-1][1]+teller[i][0];

            }

            ord.push_back(make_pair(teller[i][1],i));

            count1++;
        }
        else{//vip customer;
            teller[i][0]=0; teller[i][1]=0;  teller[i][2]=0;  teller[i][3]=0;  teller[i][4]=0;
            teller[i][5]=arrivalTimevip();
            teller[i][8]=serviceTimevip();
            if(i==0){
                teller[i][6]=teller[i][5];
                teller[i][7]=0;
                a=a+  teller[i][8];
            }

            else{
                if( teller[i-1][8]==0)
                    teller[i][6]=teller[i-1][1]+teller[i][5];
                else
                    teller[i][6]=teller[i-1][6]+teller[i][5];

            }
            vip.push_back(make_pair(teller[i][6],i));
            count2++;
        }
        teller[7][8]=3;

    }

    int oordd=ord.size(),vipp=vip.size();
    int tellerord[oordd][7],tellervip[vipp][7];
    /*
     *  * 0 for arrival time
            * 1 for interarrival time
            * 2 for waiting time
            * 3 for service time
            * 4 for service start time
            * 5 for completion time;1
            * 6 for time in system;1*/
    tellerord[0][0]=teller[ord[0].second][0];
    tellerord[0][1]=teller[ord[0].second][1];
    tellerord[0][2]=0;
    tellerord[0][3]=teller[ord[0].second][3];
    tellerord[0][4]=tellerord[0][1];
    tellerord[0][5]=tellerord[0][4]+tellerord[0][3];
    tellerord[0][6]=tellerord[0][2]+tellerord[0][3];
    for (int i = 1; i < ord.size(); ++i) {
        tellerord[i][0]=teller[ord[i].second][0];
        tellerord[i][1]=teller[ord[i].second][1];
        if(tellerord[i-1][5]<=tellerord[i][1])
            tellerord[i][2]=0;
        else
            tellerord[i][2]=tellerord[i-1][5]-tellerord[i][1];
        tellerord[i][3]=teller[ord[i].second][3];
        tellerord[i][4]=tellerord[i][1]+tellerord[i][2];
        tellerord[i][5]=tellerord[i][4]+tellerord[i][3];
        tellerord[i][6]=tellerord[i][2]+tellerord[i][3];
    }
    tellervip[0][0]=teller[vip[0].second][5];
    tellervip[0][1]=teller[vip[0].second][6];
    tellervip[0][2]=0;
    tellervip[0][3]=teller[vip[0].second][8];
    tellervip[0][4]=tellervip[0][1];
    tellervip[0][5]=tellervip[0][4]+tellervip[0][3];
    tellervip[0][6]=tellervip[0][2]+tellervip[0][3];
    for (int i = 1; i < vip.size(); ++i) {
        tellervip[i][0]=teller[vip[i].second][5];
        tellervip[i][1]=teller[vip[i].second][6];
        if(tellervip[i-1][5]<=tellervip[i][1])
            tellervip[i][2]=0;
        else
            tellervip[i][2]=tellervip[i-1][5]-tellervip[i][1];
        tellervip[i][3]=teller[vip[i].second][8];
        tellervip[i][4]=tellervip[i][1]+tellervip[i][2];
        tellervip[i][5]=tellervip[i][4]+tellervip[i][3];
        tellervip[i][6]=tellervip[i][2]+tellervip[i][3];
    }

    if(ord[0].second==0)
        ord.pop_front();
    else
        vip.pop_front();
    /* for (int i = 0; i < vip.size(); ++i) {
         cout<<vip[i].first<<" "<<vip[i].second<<"\n";
     }
     for (int i = 0; i < ord.size(); ++i) {
         cout<<ord[i].first<<" "<<ord[i].second<<"\n";
     }
 */


    while (f>0){
        if(vip[0].first<=a&&vip.size()>0){
            teller[vip[0].second][7]=a-vip[0].first;//cout<< teller[vip[0].second][7]<<" \n";
            a=a+teller[vip[0].second][8];
            vip.pop_front();
            f--;
            //continue;
        }
        else if(ord[0].first<=a&&ord.size()>0){
            teller[ord[0].second][2]=a-ord[0].first; //cout<< teller[ord[0].second][2]<<" \n";
            a=a+teller[ord[0].second][3];
            ord.pop_front();
            f--;
            // continue;
        }
        else {
            if(vip[0].first<=ord[0].first&&vip.empty()&&ord.empty()){
                teller[vip[0].second][7]=0;

                a=teller[vip[0].second][6]+teller[vip[0].second][8];
                vip.pop_front();
                f--;
                // continue;
            }
            else
            { teller[ord[0].second][2]=0;

                a=teller[ord[0].second][1]+teller[ord[0].second][3];
                ord.pop_front();
                f--;
                // continue;
            }
        }

    }
    for (int i = 0; i < num; ++i) {
        if(teller[i][8]==0)
        { teller[i][10]=teller[i][2]+teller[i][1];
            teller[i][4]=teller[i][10]+teller[i][3];
            teller[i][11]=teller[i][2]+teller[i][3];

            wait_time_ord=wait_time_ord+teller[i][2];

        } else{
            teller[i][10]=teller[i][7]+teller[i][6];
            teller[i][9]=teller[i][10]+teller[i][8];
            teller[i][11]=teller[i][7]+teller[i][8];

            wait_time_ord=wait_time_ord+teller[i][7];
        }


    }
    cout<<"in case one teller"<<'\n';
    cout << "             a_o " <<" int_o "<<
         " w _ord "<<" s_ord "<<" c_ord "<<" a_dist "<<" int_dist "<<" w_dist "<<" ser_dist "
         <<" comp_dist "<<" sst "<<" t_sys "<<'\n';
    for (int i = 0; i <10 ; ++i) {
        cout<<"customer "<<i+1<<"   "<<teller[i][0]<<"     "<<teller[i][1]<<"      "<<teller[i][2]<<
            "       "<<teller[i][3]<<"      "<<teller[i][4]<<"      "<<teller[i][5]<<"      "<<teller[i][6]
            <<"        "<<teller[i][7]<<"        "<<teller[i][8]<<"       "<<teller[i][9]<<"       "<<teller[i][10]
            <<"        "<<teller[i][11]<<'\n';
    }
    //cout<<"the average service time is "<<(service_time)/num<<'\n';
    //cout<<"the average waiting time is "<<(wait_time)/num<<'\n';

    return 0;
}
